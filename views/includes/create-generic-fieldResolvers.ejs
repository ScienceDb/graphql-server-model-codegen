<%# generic_to_one -%>
<% associations_temp = associationsArguments["generic_to_one"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>

  /**
    * <%=associations_temp[i].name%>Impl - Return associated record.
    *
    * @param  {object} search      Search argument to match the associated record.
    * @param  {object} context     Provided to every resolver holds contextual information like the
    * resquest query and user info.
    * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
    * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
    * is invoked, the server will include any so reported errors in the final response, i.e. the
    * GraphQL response will have a non empty errors property.
    * @return {type}   Associated record.
    */
  async <%=associations_temp[i].name%>Impl({search}, context, benignErrorReporter){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('<%=associations_temp[i].name%>Impl() is not implemented');
  }
<%}-%>
<%# generic_to_many -%>
<% associations_temp = associationsArguments["generic_to_many"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>

  /**
    * <%=associations_temp[i].name%>FilterImpl - Return certain number, specified in pagination argument,
    * of records associated with the current instance, this records should also holds the condition of search
    * argument, all of them sorted as specified by the order argument.
    *
    * @param  {object} search      Search argument for filtering associated records.
    * @param  {array} order        Type of sorting (ASC, DESC) for each field.
    * @param  {object} pagination  Offset and limit to get the records from and to respectively.
    * @param  {object} context     Provided to every resolver holds contextual information like the
    * resquest query and user info.
    * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
    * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
    * is invoked, the server will include any so reported errors in the final response, i.e. the
    * GraphQL response will have a non empty errors property.
    * @return {array}    Array of associated records holding conditions specified by search, order and
    * pagination argument.
    */
  async <%=associations_temp[i].name%>FilterImpl({search,order,pagination}, context, benignErrorReporter){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('<%=associations_temp[i].name%>FilterImpl() is not implemented');
  }

  /**
    * <%=associations_temp[i].name%>ConnectionImpl - Return certain number, specified in pagination argument,
    * of records associated with the current instance, this records should also holds the condition of search
    * argument, all of them sorted as specified by the order argument.
    *
    * @param  {object} search      Search argument for filtering associated records.
    * @param  {array} order        Type of sorting (ASC, DESC) for each field.
    * @param  {object} pagination  Cursor and first (indicatig the number of records to retrieve)
    * arguments to apply cursor-based pagination.
    * @param  {object} context     Provided to every resolver holds contextual information like the
    * resquest query and user info.
    * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
    * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
    * is invoked, the server will include any so reported errors in the final response, i.e. the
    * GraphQL response will have a non empty errors property.
    * @return {array}    Array of records as grapqhql connections holding conditions specified by search,
    * order and pagination argument.
    */
  async <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}, context, benignErrorReporter){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('<%=associations_temp[i].name%>ConnectionImpl() is not implemented');
  }

  /**
    * countFiltered<%=associations_temp[i].name_cp%>Impl - Count number of associated records that
    * holds the conditions specified in the search argument.
    *
    * @param  {object} {search}    Search argument for filtering associated records.
    * @param  {object} context     Provided to every resolver holds contextual information like the
    * resquest query and user info.
    * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
    * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
    * is invoked, the server will include any so reported errors in the final response, i.e. the
    * GraphQL response will have a non empty errors property.
    * @return {type}   Number of associated records that holds the conditions specified in the search
    * argument.
    */
  async countFiltered<%=associations_temp[i].name_cp%>Impl({search}, context, benignErrorReporter){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('countFiltered<%- associations_temp[i].name_cp %>Impl() is not implemented');
  }
<%}-%>