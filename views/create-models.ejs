'use strict';

const _ = require('lodash');
const Sequelize = require('sequelize');
const dict = require('../../utils/graphql-sequelize-types');
const searchArg = require('../../utils/search-argument');
const globals = require('../../config/globals');
const validatorUtil = require('../../utils/validatorUtil');
const fileTools = require('../../utils/file-tools');
const helpersAcl = require('../../utils/helpers-acl');
const email = require('../../utils/email');
const fs = require('fs');
const path = require('path');
const os = require('os');
const uuidv4 = require('uuidv4').uuid;
const helper = require('../../utils/helper');
const models = require(path.join(__dirname, '..', 'index.js'));
const moment = require('moment');
const errorHelper = require('../../utils/errors');
// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

/**
 * module - Creates a sequelize model
 *
 * @param  {object} sequelize Sequelize instance.
 * @param  {object} DataTypes Allowed sequelize data types.
 * @return {object}           Sequelize model with associations defined
 */

module.exports = class <%- name -%> extends Sequelize.Model{

  static init(sequelize, DataTypes){
    return super.init({

        <%if(!defaultId){-%>
        <%- idAttribute -%> : {
          type : Sequelize[ dict['<%- idAttributeType %>'] ],
          primaryKey: true
        },
        <%}-%>
      <% let keys = Object.keys(attributes) -%>
      <%for (let i=0; i< keys.length; i++) {-%>
        <% let type_seq =  attributes[ keys[i] ] -%>
        <%=  keys[i] %>: {
            type: Sequelize[ dict['<%= type_seq %>'] ]<% if(type_seq === 'Time' ){-%>,
            get(){
              let <%=  keys[i] %> = this.getDataValue('<%=  keys[i] %>');
              if(<%=  keys[i] %> !== null ){
                let m = moment(<%=  keys[i] %>, "HH:mm:ss.SSS[Z]");
                if(m.isValid()){
                  return m.format("HH:mm:ss.SSS[Z]");
                }
              }
            }
            <%}-%>
        }
        <%if(i !== (keys.length -1) ){ -%>,<%}-%>
      <%}-%>


    },{ <%if(indices !== undefined){let string_indices = indices.map(x => { return "'" + x + "'" }) -%>
      indexes: [<%- string_indices.join() -%> ], <%}-%>
      modelName: "<%- nameLc -%>",
      tableName: "<%-namePl-%>",
      sequelize
     } );
  }

  static associate(models){
    <% for(var key in associationsArguments){ -%>
      <%for(let i=0; i< associationsArguments[key].length; i++){-%>
        <%if (key !== 'associations'){-%>
          <%if(associationsArguments[key][i].targetStorageType === 'sql'){-%>
            <%if (associationsArguments[key][i].type === 'to_one' && associationsArguments[key][i].keyIn !== associationsArguments[key][i].target){-%>
              <%- name -%>.belongsTo(models.<%= associationsArguments[key][i].target_lc -%>
            <%}-%>
            <% if (associationsArguments[key][i].type === 'to_one' && associationsArguments[key][i].keyIn === associationsArguments[key][i].target){-%>
              <%- name -%>.hasOne(models.<%= associationsArguments[key][i].target_lc -%>
            <%}-%>
            <% if (associationsArguments[key][i].type === 'to_many' && associationsArguments[key][i].keyIn === associationsArguments[key][i].target){-%>
              <%- name -%>.hasMany(models.<%= associationsArguments[key][i].target_lc -%>
            <%}-%>
            <% if (associationsArguments[key][i].type === 'to_many_through_sql_cross_table' ){-%>
              <%- name -%>.belongsToMany(models.<%= associationsArguments[key][i].target_lc -%>
            <%}-%>
            <% if(key === 'to_many_through_sql_cross_table'){ -%> ,{as: '<%= associationsArguments[key][i].name -%>',
            foreignKey:'<%= associationsArguments[key][i].sourceKey -%>',
            through : '<%= associationsArguments[key][i].keysIn -%>',
            onDelete: 'CASCADE'}  <%}else{ -%>
            ,{as: '<%= associationsArguments[key][i].name -%>', foreignKey:'<%= associationsArguments[key][i].targetKey -%>' }
            <%}-%>);
          <%}-%>
        <%}-%>
      <%}-%>
    <% } -%>
  }

  static async readById(id){
    let item = await <%- name -%>.findByPk(id);
    if (item === null) {
        throw new Error(`Record with ID = "${id}" does not exist`);
    }
    return validatorUtil.validateData('validateAfterRead', this, item);
  }

  static async countRecords(search){
    let options = {}
    options['where'] = helper.searchConditionsToSequelize(search);
    return super.count(options);
  }

  static async readAll(search, order, pagination, benignErrorReporter){
    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef(benignErrorReporter);
    // build the sequelize options object for limit-offset-based pagination
    let options = helper.buildLimitOffsetSequelizeOptions(search, order, pagination, this.idAttribute());  
    let records = await super.findAll(options);
    // validationCheck after read
    return validatorUtil.bulkValidateData('validateAfterRead', this, records, benignErrorReporter);
  }

  static async readAllCursor(search, order, pagination, benignErrorReporter){
    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef(benignErrorReporter);
    
    // build the sequelize options object for cursor-based pagination
    let options = helper.buildCursorBasedSequelizeOptions(search, order, pagination, this.idAttribute());
    let records = await super.findAll(options);
    // validationCheck after read
    records = await validatorUtil.bulkValidateData('validateAfterRead', this, records, benignErrorReporter);
    // get the first record (if exists) in the opposite direction to determine pageInfo.
    // if no cursor was given there is no need for an extra query as the results will start at the first (or last) page.
    let oppRecords = [];
    if (pagination && (pagination.after !== undefined || pagination.before !== undefined)) {
      let oppOptions = helper.buildOppositeSearch(search, order, pagination, this.idAttribute());
      oppRecords = await super.findAll(oppOptions);
    }
    // build the graphql Connection Object
    let edges = helper.buildEdgeObject(records);
    let pageInfo = helper.buildPageInfo(edges, oppRecords, pagination);
    return {edges, pageInfo};
  }

  static async addOne(input){
    //validate input
    await validatorUtil.validateData('validateForCreate', this, input);
    try{
      const result = await sequelize.transaction( async(t) =>{
        let item = await super.create(input, {transaction:t});
        return item;
      });
      return result;
    }catch(error){
      throw error;
    }

  }

  static  async deleteOne(id){
    //validate id
    await validatorUtil.validateData('validateForDelete', this, id);
    let destroyed = await super.destroy({where:{[this.idAttribute()] : id} });
    if(destroyed !== 0){
      return 'Item successfully deleted';
    }else{
      throw new Error(`Record with ID = ${id} does not exist or could not been deleted`);
    }
  }

  static async updateOne(input){
    //validate input
    await validatorUtil.validateData('validateForUpdate', this, input);
    try{
      let result = await sequelize.transaction( async (t) =>{
        let updated = await super.update( input, { where:{ [this.idAttribute()] : input[this.idAttribute()] }, returning: true, transaction: t  } );
        return updated;
      });
      if(result[0] === 0){
        throw new Error(`Record with ID = ${input[this.idAttribute()]} does not exist`);
      }
      return result[1][0];
    }catch(error){
      throw error;
    }

  }

  static bulkAddCsv(context){

      let delim = context.request.body.delim;
      let cols = context.request.body.cols;
      let tmpFile = path.join(os.tmpdir(), uuidv4() + '.csv');

      context.request.files.csv_file.mv(tmpFile).then(() => {

          fileTools.parseCsvStream(tmpFile, this, delim, cols).then((addedZipFilePath) => {
              try {
                  console.log(`Sending ${addedZipFilePath} to the user.`);

                  let attach = [];
                  attach.push({
                      filename: path.basename("added_data.zip"),
                      path: addedZipFilePath
                  });

                  email.sendEmail(helpersAcl.getTokenFromContext(context).email,
                      'ScienceDB batch add',
                      'Your data has been successfully added to the database.',
                      attach).then(function(info) {
                      fileTools.deleteIfExists(addedZipFilePath);
                      console.log(info);
                  }).catch(function(err) {
                      fileTools.deleteIfExists(addedZipFilePath);
                      console.error(err);
                  });

              } catch (error) {
                  console.error(error.message);
              }

              fs.unlinkSync(tmpFile);
          }).catch((error) => {
              email.sendEmail(helpersAcl.getTokenFromContext(context).email,
                  'ScienceDB batch add', `${error.message}`).then(function(info) {
                  console.error(info);
              }).catch(function(err) {
                  console.error(err);
              });

              fs.unlinkSync(tmpFile);
          });



      }).catch((error) => {
          throw new Error(error);
      });

      return `Bulk import of <%- name -%> records started. You will be send an email to ${helpersAcl.getTokenFromContext(context).email} informing you about success or errors`;
  }

  /**
   * csvTableTemplate - Allows the user to download a template in CSV format with the
   * properties and types of this model.
   *
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the
   * GraphQL response will have a non empty errors property.
   */
  static async csvTableTemplate(benignErrorReporter){
      return helper.csvTableTemplate(definition);
  }

  <% associations_temp = associationsArguments["to_many_through_sql_cross_table"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    async <%=associations_temp[i].name%>FilterImpl ({search,order,pagination}){
      // build the sequelize options object for limit-offset-based pagination
      let options = helper.buildLimitOffsetSequelizeOptions(search, order, pagination, models.<%=associations_temp[i].target_lc-%>.idAttribute());  
      return this.get<%- associations_temp[i].name_cp%>(options)
    }


    async <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}){
      // build the sequelize options object for cursor-based pagination
      let options = helper.buildCursorBasedSequelizeOptions(search, order, pagination, models.<%=associations_temp[i].target_lc-%>.idAttribute());
      let records = await this.get<%- associations_temp[i].name_cp%>(options);
      // get the first record (if exists) in the opposite direction to determine pageInfo.
      // if no cursor was given there is no need for an extra query as the results will start at the first (or last) page.
      let oppRecords = [];
      if (pagination && (pagination.after !== undefined || pagination.before !== undefined)) {
        let oppOptions = helper.buildOppositeSearch(search, order, pagination, models.<%=associations_temp[i].target_lc-%>.idAttribute());
        oppRecords = await this.get<%- associations_temp[i].name_cp%>(oppOptions);
      }
      // build the graphql Connection Object
      let edges = helper.buildEdgeObject(records);
      let pageInfo = helper.buildPageInfo(edges, oppRecords, pagination);
      return {edges, pageInfo};
    }

    countFiltered<%=associations_temp[i].name_cp%>Impl({search}){
      let options = helper.searchConditionsToSequelize(search);
      return this.count<%- associations_temp[i].name_cp%>(options);
    }
  <%}-%>

<%# generic_to_one -%>
  <% associations_temp = associationsArguments["generic_to_one"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    /**
     * <%=associations_temp[i].name%>Impl - Return associated record.
     *
     * @param  {object} search      Search argument to match the associated record.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {type}   Associated record.
     */
    async <%=associations_temp[i].name%>Impl({search}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>Impl() is not implemented');
    }
  <%}-%>
<%# generic_to_many -%>
  <% associations_temp = associationsArguments["generic_to_many"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    /**
     * <%=associations_temp[i].name%>FilterImpl - Return certain number, specified in pagination argument,
     * of records associated with the current instance, this records should also holds the condition of search
     * argument, all of them sorted as specified by the order argument.
     *
     * @param  {object} search      Search argument for filtering associated records.
     * @param  {array} order        Type of sorting (ASC, DESC) for each field.
     * @param  {object} pagination  Offset and limit to get the records from and to respectively.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {array}    Array of associated records holding conditions specified by search, order and
     * pagination argument.
     */
    async <%=associations_temp[i].name%>FilterImpl({search,order,pagination}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>FilterImpl() is not implemented');
    }

    /**
     * <%=associations_temp[i].name%>ConnectionImpl - Return certain number, specified in pagination argument,
     * of records associated with the current instance, this records should also holds the condition of search
     * argument, all of them sorted as specified by the order argument.
     *
     * @param  {object} search      Search argument for filtering associated records.
     * @param  {array} order        Type of sorting (ASC, DESC) for each field.
     * @param  {object} pagination  Cursor and first (indicatig the number of records to retrieve)
     * arguments to apply cursor-based pagination.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {array}    Array of records as grapqhql connections holding conditions specified by search,
     * order and pagination argument.
     */
    async <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>ConnectionImpl() is not implemented');
    }

    /**
     * countFiltered<%=associations_temp[i].name_cp%>Impl - Count number of associated records that
     * holds the conditions specified in the search argument.
     *
     * @param  {object} {search}    Search argument for filtering associated records.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {type}   Number of associated records that holds the conditions specified in the search
     * argument.
     */
    async countFiltered<%=associations_temp[i].name_cp%>Impl({search}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('countFiltered<%- associations_temp[i].name_cp %>Impl() is not implemented');
    }
  <%}-%>

  <%- include('./includes/create-models-fieldMutations', {op: "add"}); %>
  <%- include('./includes/create-models-fieldMutations', {op: "remove"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "add"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "remove"}); %>
  <%- include('./includes/bulkAssociations-models', {op: "add"}); %>
  <%- include('./includes/bulkAssociations-models', {op: "remove"}); %>

  /**
   * idAttribute - Check whether an attribute "internalId" is given in the JSON model. If not the standard "id" is used instead.
   *
   * @return {type} Name of the attribute that functions as an internalId
   */
  static idAttribute() {
    return <%- name -%>.definition.id.name;
  }

  /**
   * idAttributeType - Return the Type of the internalId.
   *
   * @return {type} Type given in the JSON model
   */
  static idAttributeType() {
    return <%- name -%>.definition.id.type;
  }

  /**
   * getIdValue - Get the value of the idAttribute ("id", or "internalId") for an instance of <%- name -%>.
   *
   * @return {type} id value
   */
  getIdValue() {
    return this[<%- name -%>.idAttribute()]
  }

  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }

    base64Enconde(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- name -%>.definition.attributes);
  <%if( defaultId ){-%>attributes.push('<%- idAttribute -%>'); <%}-%>
    let data_values = _.pick(this, attributes);
    return data_values;
  }

  static externalIdsArray(){
    let externalIds = [];
    if(definition.externalIds){
      externalIds = definition.externalIds;
    }

    return externalIds;
  }

  static externalIdsObject(){
    return {
      <%for(let i=0; i < externalIds.length; i++){-%> <%=externalIds[i]-%>: '<%=attributes[ externalIds[i] ]-%>' <%if(i !== (externalIds.length -1) ){ -%>,<%}-%><%}-%>
    };
  }

}
