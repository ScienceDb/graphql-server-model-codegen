const _ = require('lodash');
const globals = require('../../config/globals');
const Sequelize = require('sequelize');
const dict = require('../../utils/graphql-sequelize-types');
const validatorUtil = require('../../utils/validatorUtil');
const helper = require('../../utils/helper');
const searchArg = require('../../utils/search-argument');
const path = require('path');
const fileTools = require('../../utils/file-tools');
const helpersAcl = require('../../utils/helpers-acl');
const email = require('../../utils/email');
const fs = require('fs');
const os = require('os');
const uuidv4 = require('uuidv4').uuid;
const models = require(path.join(__dirname, '..', 'index.js'));

const remoteZendroURL = "<%- url -%>";
const iriRegex = new RegExp('<%- regex -%>');

// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

/**
 * module - Creates a sequelize model
 *
 * @param  {object} sequelize Sequelize instance.
 * @param  {object} DataTypes Allowed sequelize data types.
 * @return {object}           Sequelize model with associations defined
 */

module.exports = class <%- adapterName -%> extends Sequelize.Model{

  static init(sequelize, DataTypes){
    return super.init({

        <%if(!defaultId){-%>
        <%- idAttribute -%> : {
          type : Sequelize[ dict['<%- idAttributeType %>'] ],
          primaryKey: true
        },
        <%}-%>
      <% let keys = Object.keys(attributes) -%>
      <%for (let i=0; i< keys.length; i++) {-%>
        <% let type_seq =  attributes[ keys[i] ] -%>
        <% let arrayType = ['[String]', '[Int]', '[Float]', '[Boolean]', '[Date]', '[Time]', '[DateTime]']-%>
        <%=  keys[i] %>: {
          type: Sequelize[ dict['<%= type_seq %>'] ]<% if(type_seq === 'Time' ){-%>,
          get(){
              let <%=  keys[i] %> = this.getDataValue('<%=  keys[i] %>');
              if(<%=  keys[i] %> !== null ){
                let m = moment(<%=  keys[i] %>, "HH:mm:ss.SSS[Z]");
                if(m.isValid()){
                  return m.format("HH:mm:ss.SSS[Z]");
                }
              }
            }
            <%}-%> <% if( arrayType.includes(type_seq)){-%>,
            defaultValue: '[]'
            <%}-%>
        }
        <%if(i !== (keys.length -1) ){ -%>,<%}-%>
      <%}-%>


    },{ <%if(indices !== undefined){let string_indices = indices.map(x => { return "'" + x + "'" }) -%>
      indexes: [<%- string_indices.join() -%> ], <%}-%>
      modelName: "<%- nameLc -%>",
      tableName: "<%-namePl-%>",
      sequelize
     } );
  }

  static get adapterName(){
    return '<%- adapterName -%>';
  }

  static get adapterType(){
    return '<%- storageType -%>';
  }

  /**
    * Get the storage handler, which is a static property of the data model class.
    * @returns sequelize.
    */
  get storageHandler() {
    return this.sequelize;
  }

  /**
    * Cast array to JSON string for the storage.
    * @param  {object} record  Original data record.
    * @return {object}         Record with JSON string if necessary.
    */
  static preWriteCast(record){
    for(let attr in definition.attributes){
      let type = definition.attributes[ attr ].replace(/\s+/g, '');
      if(type[0]==='[' && record[ attr ]!== undefined && record[ attr ]!== null){
        record[ attr ] = JSON.stringify(record[attr]);
      }
    }
    return record;
  }

  /**
  * Cast JSON string to array for the validation.
  * @param  {object} record  Record with JSON string if necessary.
  * @return {object}         Parsed data record.
  */
  static postReadCast(record){
      for(let attr in definition.attributes){
          let type = definition.attributes[ attr ].replace(/\s+/g, '');
          if(type[0]==='[' && record[attr] !== undefined && record[ attr ]!== null){
              record[ attr ] = JSON.parse(record[attr]);
          }
      }
      return record;
  }

  static recognizeId(iri){
    return iriRegex.test(iri);
  }

  static async readById(id){
    let item = await <%- adapterName -%>.findByPk(id);
    if (item === null) {
        throw new Error(`Record with ID = "${id}" does not exist`);
    }
    item = <%- adapterName -%>.postReadCast(item)
    return item;
  }

  static countRecords(search){
    let options = {};

    /*
     * Search conditions
     */
    if (search !== undefined && search !== null) {

      //check
      if(typeof search !== 'object') {
        throw new Error('Illegal "search" argument type, it must be an object.');
      }

      let arg = new searchArg(search);
      let arg_sequelize = arg.toSequelize(<%- adapterName -%>.definition.attributes);
      options['where'] = arg_sequelize;
    }
    return super.count(options);
  }

  static async readAllCursor(search, order, pagination){
    // build the sequelize options object for cursor-based pagination
    let options = helper.buildCursorBasedSequelizeOptions(search, order, pagination, this.idAttribute(), <%- adapterName -%>.definition.attributes);
    let records = await super.findAll(options);
    records = records.map(x => <%- adapterName -%>.postReadCast(x))

    // get the first record (if exists) in the opposite direction to determine pageInfo.
    // if no cursor was given there is no need for an extra query as the results will start at the first (or last) page.
    let oppRecords = [];
    if (pagination && (pagination.after || pagination.before)) {
      let oppOptions = helper.buildOppositeSearchSequelize(search, order, {...pagination, includeCursor: false}, this.idAttribute(), <%- adapterName -%>.definition.attributes);
      oppRecords = await super.findAll(oppOptions);
    }
    // build the graphql Connection Object
    let edges = helper.buildEdgeObject(records);
    let pageInfo = helper.buildPageInfo(edges, oppRecords, pagination);
    return {edges, pageInfo, <%- namePl -%>: edges.map((edge) => edge.node)};
  }

  static async addOne(input){
    input = <%- adapterName -%>.preWriteCast(input)
    try{
      const result = await this.sequelize.transaction( async(t) =>{
        let item = await super.create(input, {transaction:t});
        return item;
      });
      <%- adapterName -%>.postReadCast(result.dataValues)
      <%- adapterName -%>.postReadCast(result._previousDataValues)
      return result;
    }catch(error){
      throw error;
    }

  }

  static async deleteOne(id){
    let destroyed = await super.destroy({where:{[this.idAttribute()] : id} });
    if(destroyed !== 0){
      return 'Item successfully deleted';
    }else{
      throw new Error(`Record with ID = ${id} does not exist or could not been deleted`);
    }
  }

  static async updateOne(input){
    input = <%- adapterName -%>.preWriteCast(input)
    try{
      let result = await this.sequelize.transaction( async (t) =>{
        let to_update = await super.findByPk(input[this.idAttribute()]);
        if(to_update === null){
          throw new Error(`Record with ID = ${input[this.idAttribute()]} does not exist`);
        }

        let updated = await to_update.update( input, { transaction: t } );
        return updated;
      });
      <%- adapterName -%>.postReadCast(result.dataValues)
      <%- adapterName -%>.postReadCast(result._previousDataValues)
      return result;
    }catch(error){
      throw error;
    }
  }


  <%#
  /**
   * Add and remove methods for to-one association where the foreign key
   * is stored in this model and therefore this adapter is the responsible to update the foreign key.
   */
  -%>
  <%- include('./includes/create-adapter-fields-mutations', {op: "add"}); %>
  <%- include('./includes/create-adapter-fields-mutations', {op: "remove"}); %>



  static bulkAddCsv(context){

      let delim = context.request.body.delim;
      let cols = context.request.body.cols;
      let tmpFile = path.join(os.tmpdir(), uuidv4() + '.csv');

      context.request.files.csv_file.mv(tmpFile).then(() => {

          fileTools.parseCsvStream(tmpFile, this, delim, cols).then((addedZipFilePath) => {
              try {
                  console.log(`Sending ${addedZipFilePath} to the user.`);

                  let attach = [];
                  attach.push({
                      filename: path.basename("added_data.zip"),
                      path: addedZipFilePath
                  });

                  email.sendEmail(helpersAcl.getTokenFromContext(context).email,
                      'ScienceDB batch add',
                      'Your data has been successfully added to the database.',
                      attach).then(function(info) {
                      fileTools.deleteIfExists(addedZipFilePath);
                      console.log(info);
                  }).catch(function(err) {
                      fileTools.deleteIfExists(addedZipFilePath);
                      console.error(err);
                  });

              } catch (error) {
                  console.error(error.message);
              }

              fs.unlinkSync(tmpFile);
          }).catch((error) => {
              email.sendEmail(helpersAcl.getTokenFromContext(context).email,
                  'ScienceDB batch add', `${error.message}`).then(function(info) {
                  console.error(info);
              }).catch(function(err) {
                  console.error(err);
              });

              fs.unlinkSync(tmpFile);
          });

      }).catch((error) => {
          throw new Error(error);
      });
      return `Bulk import of <%- adapterName -%> records started. You will be send an email to ${helpersAcl.getTokenFromContext(context).email} informing you about success or errors`;
  }

  static csvTableTemplate(){
    return helper.csvTableTemplate(definition);
  }

  <%- include('./includes/bulkAssociations-models', {op: "add"}); %>
  <%- include('./includes/bulkAssociations-models', {op: "remove"}); %>

  /**
   * idAttribute - Check whether an attribute "internalId" is given in the JSON model. If not the standard "id" is used instead.
   *
   * @return {type} Name of the attribute that functions as an internalId
   */

  static idAttribute() {
    return <%- adapterName -%>.definition.id.name;
  }

  /**
   * idAttributeType - Return the Type of the internalId.
   *
   * @return {type} Type given in the JSON model
   */

  static idAttributeType() {
    return <%- adapterName -%>.definition.id.type;
  }

  /**
   * getIdValue - Get the value of the idAttribute ("id", or "internalId") for an instance of <%- adapterName -%>.
   *
   * @return {type} id value
   */

  getIdValue() {
    return this[<%- adapterName -%>.idAttribute()]
  }

  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }

    base64Enconde(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- adapterName -%>.definition.attributes);
  <%if( defaultId ){-%>attributes.push('<%- idAttribute -%>'); <%}-%>
    let data_values = _.pick(this, attributes);
    return data_values;
  }

  static externalIdsArray(){
    let externalIds = [];
    if(definition.externalIds){
      externalIds = definition.externalIds;
    }

    return externalIds;
  }

  static externalIdsObject(){
    return {
      <%for(let i=0; i < externalIds.length; i++){-%> <%=externalIds[i]-%>: '<%=attributes[ externalIds[i] ]-%>' <%if(i !== (externalIds.length -1) ){ -%>,<%}-%><%}-%>
    };
  }

}
